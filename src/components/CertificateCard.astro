---
const { name, position, image } = Astro.props;
---

<div class="certificate-card group">
  <div
    class="relative bg-white overflow-hidden h-96 rounded-xl shadow-sm hover:shadow-xl transition-all duration-500"
  >
    <div class="relative">
      <div class="h-[200px] w-full rounded-t-xl">
        <div class="absolute inset-0 bg-pattern opacity-5"></div>

        <img
          src={image}
          alt={name}
          class="w-full h-full object-cover object-center rounded-t-xl transform transition-transform duration-700 group-hover:scale-105"
          loading="lazy"
        />

        <div
          class="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-all duration-500 rounded-t-xl"
        >
        </div>
      </div>

      <div class="absolute top-4 left-4">
        <div class="certificate-badge">
          <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
            <path d="M10 12a2 2 0 100-4 2 2 0 000 4z"></path>
            <path
              fill-rule="evenodd"
              d="M10 18a8 8 0 100-16 8 8 0 000 16zm0-2a6 6 0 100-12 6 6 0 000 12z"
              clip-rule="evenodd"></path>
          </svg>
          Certificate
        </div>
      </div>
    </div>

    <div class="p-6">
      <h3
        class="text-xl font-bold text-gray-900 group-hover:text-indigo-600 transition-colors duration-300 mb-2"
      >
        {name}
      </h3>
      <div class="flex items-center space-x-2">
        <div class="position-tag">
          {position}
        </div>
      </div>

      <div class="mt-6">
        <button class="preview-button group/btn">
          <span>Preview Certificate</span>
          <svg
            class="w-5 h-5 ml-2 transform transition-transform duration-300 group-hover/btn:translate-x-1"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
            ></path>
          </svg>
        </button>
      </div>
    </div>

    <div
      class="absolute -bottom-1 left-0 right-0 h-1 bg-gradient-to-r from-indigo-500 to-purple-500 transform scale-x-0 group-hover:scale-x-100 transition-transform duration-500"
    >
    </div>
  </div>
</div>

<style>
  .certificate-card {
    @apply transform transition-all duration-500 hover:-translate-y-2;
    animation: cardEntrance 0.8s ease-out forwards;
  }

  .bg-pattern {
    background-image: radial-gradient(
      circle at 1px 1px,
      #4f46e5 1px,
      transparent 0
    );
    background-size: 20px 20px;
  }

  .certificate-badge {
    @apply flex items-center px-3 py-1 text-sm font-medium rounded-full
           bg-white/90 text-indigo-600
           transform transition-all duration-300 group-hover:scale-105;
    backdrop-filter: blur(4px);
  }

  .position-tag {
    @apply inline-flex px-3 py-1 text-sm font-medium rounded-full
           bg-indigo-50 text-indigo-600
           transition-all duration-300;
  }

  .preview-button {
    @apply flex items-center px-4 py-2 rounded-full
           text-sm font-medium
           bg-gray-50 text-gray-600
           transition-all duration-300
           hover:bg-indigo-600 hover:text-white;
  }

  @keyframes cardEntrance {
    0% {
      opacity: 0;
      transform: translateY(30px) scale(0.95);
    }
    100% {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }

  .certificate-card::after {
    content: "";
    position: absolute;
    left: 5%;
    right: 5%;
    bottom: -10px;
    height: 90%;
    background: linear-gradient(
      180deg,
      rgba(79, 70, 229, 0.2) 0%,
      transparent 100%
    );
    filter: blur(20px);
    border-radius: inherit;
    z-index: -1;
    opacity: 0;
    transition: all 0.5s;
  }

  .certificate-card:hover::after {
    opacity: 1;
    transform: translateY(10px);
  }
  .certificate-card::before {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 50%;
    height: 100%;
    background: linear-gradient(
      to right,
      transparent 0%,
      rgba(255, 255, 255, 0.2) 50%,
      transparent 100%
    );
    transform: skewX(-25deg);
    animation: shine 8s infinite;
  }
</style>

<script>
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry, index) => {
        if (entry.isIntersecting) {
          (entry.target as HTMLElement).style.animationDelay =
            `${index * 0.15}s`;
          entry.target.classList.add("show");
        }
      });
    },
    {
      threshold: 0.1,
      rootMargin: "50px",
    }
  );

  document.querySelectorAll(".certificate-card").forEach((card) => {
    observer.observe(card);
  });
</script>
