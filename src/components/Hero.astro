---
import skill from "../content/skill.json";
---

<div
  class="hero-section relative min-h-screen flex items-center justify-center overflow-hidden bg-white"
>
  <div class="absolute inset-0 z-0">
    <div
      class="absolute inset-0 bg-gradient-to-tr from-indigo-50 via-white to-purple-50"
    >
    </div>

    <div class="absolute inset-0">
      <div class="tech-pattern"></div>
    </div>

    <div class="floating-elements">
      {
        Array.from({ length: 15 }).map((_, i) => (
          <div
            class="floating-element"
            style={`--delay: ${i * 0.5}s; --duration: ${8 + i * 0.5}s; --x: ${Math.random() * 100}vw; --y: ${Math.random() * 100}vh;`}
          />
        ))
      }
    </div>
  </div>

  <div class="relative z-10 container mx-auto px-4">
    <div class="text-center space-y-8 reveal-content">
      <div class="space-y-4 reveal-item">
        <h1
          class="text-5xl md:text-7xl py-10 font-bold tracking-tight text-transparent bg-clip-text bg-gradient-to-r from-indigo-600 to-purple-600"
        >
          Hey there, I'm khris-xp
        </h1>
      </div>

      <p
        class="text-xl md:text-2xl text-gray-600 max-w-3xl mx-auto leading-relaxed reveal-item"
      >
        A passionate computer engineering student at
        <span class="text-indigo-600 font-medium">KMITL (CE 61)</span> and secretary
        of <span class="text-indigo-600 font-medium">SAIG Laboratory</span>.
        <span class="typing-text"></span>
      </p>

      <div
        class="flex flex-col sm:flex-row gap-4 justify-center items-center mt-12 reveal-item"
      >
        <a href="https://github.com/khris-xp" class="primary-button group">
          <span class="relative z-10">Explore my Github</span>
          <div
            class="absolute inset-0 bg-gradient-to-r from-indigo-600 to-purple-600 rounded-full transform transition-transform duration-300 group-hover:scale-105"
          >
          </div>
        </a>

        <a href="/" class="secondary-button group">
          <span>Learn more</span>
          <svg
            class="w-5 h-5 ml-2 transform transition-transform duration-300 group-hover:translate-x-1"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
          </svg>
        </a>
      </div>

      <div class="mt-16 reveal-item">
        <div class="tech-stack">
          <div class="scroll">
            {skill.skills.map((tech) => <span class="tech-item">{tech.name}</span>)}
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Scroll Indicator -->
  <div
    class="absolute bottom-8 left-1/2 transform -translate-x-1/2 scroll-indicator"
  >
    <div class="mouse">
      <div class="wheel"></div>
    </div>
    <div class="arrows">
      <span></span>
      <span></span>
      <span></span>
    </div>
  </div>
</div>

<style>
  /* Animated Background */
  .tech-pattern {
    background-image: radial-gradient(
        circle at 25px 25px,
        rgba(99, 102, 241, 0.15) 2px,
        transparent 0
      ),
      radial-gradient(
        circle at 75px 75px,
        rgba(139, 92, 246, 0.15) 2px,
        transparent 0
      );
    background-size: 100px 100px;
    width: 100%;
    height: 100%;
    animation: patternMove 20s linear infinite;
  }

  /* Floating Elements */
  .floating-element {
    position: absolute;
    width: 6px;
    height: 6px;
    background: linear-gradient(135deg, #6366f1, #8b5cf6);
    border-radius: 50%;
    left: var(--x);
    top: var(--y);
    animation: float var(--duration) ease-in-out infinite;
    animation-delay: var(--delay);
    opacity: 0.3;
  }

  /* Buttons */
  .primary-button {
    @apply relative px-8 py-3 text-white font-semibold overflow-hidden;
  }

  .secondary-button {
    @apply flex items-center px-8 py-3 rounded-full border-2 border-gray-300 
           text-gray-700 font-semibold transition-all duration-300
           hover:border-indigo-600 hover:text-indigo-600;
  }

  /* Tech Stack Carousel */
  .tech-stack {
    @apply relative overflow-hidden py-4 mx-auto;
    mask-image: linear-gradient(
      to right,
      transparent,
      black 20%,
      black 80%,
      transparent
    );
  }

  .scroll {
    @apply flex whitespace-nowrap;
    animation: scroll 20s linear infinite;
  }

  .tech-item {
    @apply mx-4 text-gray-600 bg-white/80 px-4 py-1 rounded-full text-sm;
  }

  /* Mouse Scroll Indicator */
  .mouse {
    @apply w-8 h-14 border-2 border-gray-400 rounded-full mb-2;
  }

  .wheel {
    @apply w-1 h-3 bg-gray-400 rounded-full mx-auto mt-2;
    animation: scroll-wheel 2s ease infinite;
  }

  .arrows {
    @apply flex flex-col items-center;
  }

  .arrows span {
    @apply block w-3 h-3 border-b-2 border-r-2 border-gray-400 transform rotate-45 mt-0;
    animation: arrow-scroll 2s infinite;
  }

  /* Animations */
  @keyframes patternMove {
    0% {
      background-position: 0 0;
    }
    100% {
      background-position: 100px 100px;
    }
  }

  @keyframes float {
    0%,
    100% {
      transform: translate(0, 0);
    }
    50% {
      transform: translate(20px, -20px);
    }
  }

  @keyframes scroll {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(-50%);
    }
  }

  @keyframes scroll-wheel {
    0% {
      transform: translateY(0);
      opacity: 1;
    }
    100% {
      transform: translateY(8px);
      opacity: 0;
    }
  }

  @keyframes arrow-scroll {
    0% {
      opacity: 0;
      transform: rotate(45deg) translate(-20px, -20px);
    }
    50% {
      opacity: 1;
    }
    100% {
      opacity: 0;
      transform: rotate(45deg) translate(20px, 20px);
    }
  }

  /* Content Reveal Animations */
  .reveal-content {
    opacity: 0;
    animation: reveal 1s cubic-bezier(0.22, 1, 0.36, 1) forwards;
  }

  .reveal-item {
    opacity: 0;
    transform: translateY(20px);
    animation: reveal-item 0.8s cubic-bezier(0.22, 1, 0.36, 1) forwards;
  }

  @keyframes reveal {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes reveal-item {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>

<script>
  // Typing animation
  const texts = [
    "Interested in Web Development.",
    "Building modern web experiences.",
    "Creating innovative solutions.",
  ];
  let textIndex = 0;
  let charIndex = 0;
  let isDeleting = false;
  const typingSpeed = 100;
  const deletingSpeed = 50;
  const pauseTime = 2000;

  function typeText() {
    const typingElement = document.querySelector(".typing-text");
    if (!typingElement) return;

    const currentText = texts[textIndex];
    if (isDeleting) {
      typingElement.textContent = currentText.substring(0, charIndex - 1);
      charIndex--;
    } else {
      typingElement.textContent = currentText.substring(0, charIndex + 1);
      charIndex++;
    }

    if (!isDeleting && charIndex === currentText.length) {
      isDeleting = true;
      setTimeout(() => typeText(), pauseTime);
    } else if (isDeleting && charIndex === 0) {
      isDeleting = false;
      textIndex = (textIndex + 1) % texts.length;
      setTimeout(() => typeText(), typingSpeed);
    } else {
      setTimeout(() => typeText(), isDeleting ? deletingSpeed : typingSpeed);
    }
  }

  // Start typing animation
  typeText();

  // Reveal animations on scroll
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          (entry.target as HTMLElement).style.animationDelay =
            `${(entry.target as HTMLElement).dataset.delay || 0}s`;
          entry.target.classList.add("show");
        }
      });
    },
    {
      threshold: 0.1,
      rootMargin: "50px",
    }
  );

  document.querySelectorAll(".reveal-item").forEach((item, index) => {
    (item as HTMLElement).dataset.delay = (index * 0.2).toString();
    observer.observe(item);
  });
</script>
