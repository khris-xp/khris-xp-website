---
const { name, link, image, technologies, position } = Astro.props;
---

<a
  href={link}
  class="project-card-v3 group relative bg-white rounded-xl overflow-hidden transition-all duration-500"
>
  <div class="relative">
    <div class="relative">
      <div class="aspect-video overflow-hidden">
        <img
          src={image}
          alt={name}
          class="w-full h-full object-cover transition-transform duration-700 group-hover:scale-110"
          loading="lazy"
        />
      </div>

      <div
        class="absolute inset-0 bg-gradient-to-t from-gray-900 via-gray-900/40 to-transparent opacity-0 group-hover:opacity-100 transition-all duration-500"
      >
      </div>

      <div
        class="absolute inset-0 p-6 flex flex-col justify-end transform translate-y-8 group-hover:translate-y-0 opacity-0 group-hover:opacity-100 transition-all duration-500"
      >
        <span class="text-white/80 text-sm font-medium mb-2">{position}</span>
        <h3 class="text-white text-xl font-bold leading-tight mb-4">{name}</h3>

        <div class="flex flex-wrap gap-2">
          {
            technologies.map((tech: string) => (
              <span class="tech-pill-v3">{tech}</span>
            ))
          }
        </div>
      </div>
    </div>

    <div class="absolute top-4 left-4 right-4 flex justify-between items-start">
      <div
        class="bg-white/90 backdrop-blur-sm rounded-lg p-3 transform transition-transform duration-300 group-hover:-translate-y-2"
      >
        <p class="text-gray-900 font-semibold leading-none">{name}</p>
      </div>

      <div class="view-project-button">
        <span class="relative z-10">View</span>
        <svg class="w-4 h-4 ml-1" viewBox="0 0 20 20" fill="currentColor">
          <path
            fill-rule="evenodd"
            d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z"
            clip-rule="evenodd"></path>
        </svg>
      </div>
    </div>
  </div>

  <!-- Bottom Info (Optional) -->
  <div
    class="absolute -bottom-full left-0 right-0 bg-white p-4 transform transition-transform duration-500 group-hover:translate-y-full"
  >
    <div class="flex justify-between items-center">
      <span class="text-sm text-gray-600">View Project Details</span>
      <span class="text-indigo-600">â†’</span>
    </div>
  </div>
</a>

<style>
  .project-card-v3 {
    @apply transform transition-all duration-500 hover:shadow-2xl;
    animation: slideUpFade 0.8s ease-out forwards;
  }

  .tech-pill-v3 {
    @apply px-2 py-1 text-xs font-medium rounded-md
           bg-white/20 text-white
           backdrop-blur-sm
           transition-all duration-300
           hover:bg-white/30;
  }

  .view-project-button {
    @apply flex items-center space-x-1 text-sm font-medium
           bg-white/90 text-gray-900
           backdrop-blur-sm rounded-lg px-3 py-2
           transform transition-all duration-300
           group-hover:bg-indigo-600 group-hover:text-white
           group-hover:-translate-y-2;
  }

  @keyframes slideUpFade {
    0% {
      opacity: 0;
      transform: translateY(30px) scale(0.9);
    }
    100% {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }

  /* Glowing effect */
  .project-card-v3::after {
    content: "";
    position: absolute;
    inset: -1px;
    background: linear-gradient(45deg, #4f46e5, #7c3aed, #4f46e5);
    filter: blur(1px);
    mask:
      linear-gradient(#fff 0 0) content-box,
      linear-gradient(#fff 0 0);
    mask-composite: exclude;
    opacity: 0;
    transition: opacity 0.5s;
  }

  .project-card-v3:hover::after {
    opacity: 1;
  }

  /* Card raise effect */
  .project-card-v3::before {
    content: "";
    position: absolute;
    inset: 0;
    transform: translateY(10px) scale(0.95);
    background: rgba(0, 0, 0, 0.1);
    filter: blur(20px);
    border-radius: inherit;
    z-index: -1;
    opacity: 0;
    transition: all 0.5s;
  }

  .project-card-v3:hover::before {
    opacity: 1;
    transform: translateY(20px) scale(0.95);
  }
</style>

<script>
  // Intersection Observer for scroll-based animations
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry, index) => {
        if (entry.isIntersecting) {
          (entry.target as HTMLElement).style.animationDelay =
            `${index * 0.15}s`;
          entry.target.classList.add("show");
        }
      });
    },
    {
      threshold: 0.1,
      rootMargin: "50px",
    }
  );

  document.querySelectorAll(".project-card-v3").forEach((card) => {
    observer.observe(card);
  });
</script>
