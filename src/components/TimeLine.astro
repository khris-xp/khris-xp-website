---
import experience from '../content/experience.json';
import { calculateExperingDate } from 'script/date';

const experienceData = experience.experience;
---

<div class="relative container mx-auto px-6 py-16">
  <div class="relative wrap overflow-hidden py-2">
    <div class="absolute left-1/2 transform -translate-x-1/2 h-full w-1 bg-gradient-to-b from-indigo-200 via-indigo-400 to-purple-500"></div>

    {experienceData.map((exp, index) => (
      <div 
        class={`timeline-item mb-16 w-full flex justify-between items-center ${
          index % 2 === 0 ? 'right-timeline' : 'flex-row-reverse left-timeline'
        }`}
        style={`--delay: ${index * 0.2}s`}
      >
        <div class="order-1 w-5/12 animate-slide-in">
          <div class="relative group">
            <div class="p-6 bg-white rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1">
              <div class="flex items-center mb-4">
                <div class="w-12 h-12 rounded-lg overflow-hidden bg-gray-50 mr-4 flex items-center justify-center">
                  <img 
                    src={exp.image} 
                    alt={`${exp.company} logo`}
                    class="w-10 h-10 object-contain"
                  />
                </div>
                <div>
                  <h3 class="text-xl font-bold text-gray-800">{exp.company}</h3>
                  <p class="text-indigo-600 font-medium">{exp.designation}</p>
                </div>
              </div>

              <div class="space-y-3">
                <div class="flex items-center text-sm text-gray-500">
                  <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"></path>
                  </svg>
                  <span>{exp.duration}</span>
                  <span class="mx-2">â€¢</span>
                  <span>{calculateExperingDate(exp.startDate, exp.endDate)}</span>
                </div>

                <div class="flex items-center text-sm text-gray-500">
                  <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"></path>
                  </svg>
                  <span>{exp.location}</span>
                </div>

                <p class="text-gray-600 mt-2">{exp.description}</p>
              </div>

              <div class="absolute inset-0 rounded-xl border-2 border-transparent bg-gradient-to-r from-indigo-500 to-purple-500 opacity-0 group-hover:opacity-100 transition-opacity duration-300" style="mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0); mask-composite: exclude;"></div>
            </div>
          </div>
        </div>

        <div class="order-1 w-8 h-8 rounded-full bg-indigo-500 border-4 border-white shadow-xl absolute left-1/2 transform -translate-x-1/2">
          <div class="w-full h-full rounded-full bg-gradient-to-r from-indigo-500 to-purple-500 animate-pulse"></div>
        </div>
      </div>
    ))}
  </div>
</div>

<style>
  .animate-fade-in {
    opacity: 0;
    animation: fadeIn 0.8s ease-out forwards;
  }

  .animate-slide-in {
    opacity: 0;
    animation: slideIn 0.8s ease-out forwards;
    animation-delay: var(--delay, 0s);
  }

  .right-timeline .animate-slide-in {
    transform: translateX(-50px);
  }

  .left-timeline .animate-slide-in {
    transform: translateX(50px);
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateX(var(--initial-x, 0));
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  /* Timeline connector line styles */
  .timeline-item::after {
    content: '';
    @apply absolute left-1/2 border-2 border-dashed border-indigo-200;
    width: 2px;
    height: 100%;
    transform: translateX(-50%);
    z-index: -1;
  }

  .timeline-item:last-child::after {
    display: none;
  }

  /* Responsive styles */
  @media (max-width: 768px) {
    .timeline-item {
      @apply flex-col items-start;
    }

    .timeline-item > div:first-child {
      @apply w-full mb-4;
    }

    .timeline-item::after {
      @apply left-4;
    }

    .timeline-dot {
      @apply left-4;
    }
  }
</style>

<script>
  // Optional: Add intersection observer for smoother animations
  const timelineItems = document.querySelectorAll('.timeline-item');

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('show');
      }
    });
  }, {
    threshold: 0.1
  });

  timelineItems.forEach(item => {
    observer.observe(item);
  });
</script>